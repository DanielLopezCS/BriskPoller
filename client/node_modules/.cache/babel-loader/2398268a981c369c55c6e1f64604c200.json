{"ast":null,"code":"import axios from 'axios';\nimport { GET_POLLS, GET_POLL, GET_POLL_TEST, GET_ERRORS, PUT_VOTE, POST_POLL, GET_CHECK } from './types'; //defining base URL\n\naxios.defaults.baseURL = 'http://localhost:5000/';\nexport var getPolls = function getPolls() {\n  return function (dispatch) {\n    axios.get('/api/polls/').then(function (res) {\n      return dispatch({\n        type: GET_POLLS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: 'No polls available.'\n      });\n    });\n  };\n};\nexport var getPoll = function getPoll(id) {\n  return function (dispatch) {\n    axios.get(\"api/polls/\".concat(id)).then(function (res) {\n      return dispatch({\n        type: GET_POLL,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: 'No poll with that id.'\n      });\n    });\n  };\n};\nexport var putVote = function putVote(pollID, optionID) {\n  return function (dispatch) {\n    axios.put(\"api/polls/vote/\".concat(pollID), optionID).then(function (res) {\n      return dispatch({\n        type: PUT_VOTE,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: 'No option with that name.'\n      });\n    });\n  };\n};\nexport var postPoll = function postPoll(poll) {\n  return function (dispatch) {\n    axios.post(\"api/polls/\", poll).then(function (res) {\n      return dispatch({\n        type: POST_POLL,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: 'Title required'\n      });\n    });\n  };\n};\nexport var getCheck = function getCheck(id) {\n  return function (dispatch) {\n    axios.get(\"api/polls/check/\".concat(id)).then(function (res) {\n      return dispatch({\n        type: GET_CHECK,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: 'No poll with that id.'\n      });\n    });\n  };\n};\nexport var getPollTest = function getPollTest(id, history) {\n  return function (dispatch) {\n    history.push(\"/\");\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Daniel\\Desktop\\keto\\client\\src\\actions\\pollActions.js"],"names":["axios","GET_POLLS","GET_POLL","GET_POLL_TEST","GET_ERRORS","PUT_VOTE","POST_POLL","GET_CHECK","defaults","baseURL","getPolls","dispatch","get","then","res","type","payload","data","catch","err","getPoll","id","putVote","pollID","optionID","put","postPoll","poll","post","getCheck","getPollTest","history","push"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {GET_POLLS, GET_POLL, GET_POLL_TEST, GET_ERRORS, PUT_VOTE, POST_POLL, GET_CHECK} from './types';\r\n\r\n\r\n\r\n//defining base URL\r\naxios.defaults.baseURL = 'http://localhost:5000/';\r\n\r\n\r\nexport const getPolls = ()=>dispatch=>{\r\n    axios\r\n    .get('/api/polls/')\r\n    .then(res => \r\n        dispatch({\r\n        type:GET_POLLS,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err=>\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: 'No polls available.',\r\n        })    \r\n    )\r\n\r\n}\r\nexport const getPoll = (id)=>dispatch=>{\r\n    axios\r\n    .get(`api/polls/${id}`)\r\n    .then(res => \r\n        dispatch({\r\n        type:GET_POLL,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err=>\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: 'No poll with that id.',\r\n        })    \r\n    )\r\n\r\n}\r\nexport const putVote = (pollID, optionID) =>dispatch=>{\r\n    axios\r\n    .put(`api/polls/vote/${pollID}`, optionID)\r\n    .then(res => \r\n        dispatch({\r\n        type:PUT_VOTE,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err=>\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: 'No option with that name.',\r\n        })    \r\n    )\r\n\r\n}\r\n\r\nexport const postPoll = (poll) =>dispatch=>{\r\n    axios\r\n    .post(\"api/polls/\", poll)\r\n    .then(res => \r\n        dispatch({\r\n        type:POST_POLL,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err=>\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: 'Title required',\r\n        })    \r\n    )\r\n\r\n}\r\n\r\nexport const getCheck = (id)=>dispatch=>{\r\n    axios\r\n    .get(`api/polls/check/${id}`)\r\n    .then(res => \r\n        dispatch({\r\n        type:GET_CHECK,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err=>\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: 'No poll with that id.',\r\n        })    \r\n    )\r\n\r\n}\r\nexport const getPollTest = (id,history)=>dispatch=>{\r\n    history.push(\"/\");\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
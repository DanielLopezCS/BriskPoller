{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\src\\\\components\\\\PollDetail\\\\PollDetail.js\";\nimport React, { Component } from 'react';\nimport { Segment, Header } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { getPoll } from '../../actions/pollActions';\nimport { HorizontalBar } from 'react-chartjs-2';\nimport Spinner from '../Spinner';\nvar data = {\n  labels: ['Shamanasada asd dsadsa dsad', 'Fdsadsa dasd asd asd asdd', 'March sadasd as d sadd', 'April asd as dsad sada', 'May', 'June', 'July'],\n  datasets: [{\n    label: 'What Should I Roll?',\n    backgroundColor: 'orange',\n    borderColor: 'rgba(255,99,132,1)',\n    borderWidth: 1,\n    hoverBackgroundColor: 'yellow',\n    hoverBorderColor: 'yellow',\n    data: [65, 59, 80, 81, 56, 55, 40]\n  }]\n};\n\nvar PollDetail =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PollDetail, _Component);\n\n  function PollDetail() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PollDetail);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PollDetail)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: true,\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(PollDetail, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.getPoll(this.props.id);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.polls && nextProps.polls.poll) {\n        alert('memes');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Header, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Your Question\"), React.createElement(HorizontalBar, {\n        data: data,\n        height: 100,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(Segment.Group, {\n        horizontal: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Voters: 500\"), React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Published: 12341\"), React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Bottom\")), React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Sharable Link: www.memes.com/123133\"));\n    }\n  }]);\n\n  return PollDetail;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    poll: state.polls.poll\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getPoll: getPoll\n})(PollDetail);","map":{"version":3,"sources":["C:\\Users\\Daniel\\Desktop\\keto\\client\\src\\components\\PollDetail\\PollDetail.js"],"names":["React","Component","Segment","Header","connect","getPoll","HorizontalBar","Spinner","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","PollDetail","state","loading","props","id","nextProps","polls","poll","alert","mapStateToProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,EAAiBC,MAAjB,QAA+B,mBAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,OAAR,QAAsB,2BAAtB;AAEA,SAAQC,aAAR,QAA4B,iBAA5B;AAEA,OAAOC,OAAP,MAAoB,YAApB;AAEA,IAAMC,IAAI,GAAG;AACTC,EAAAA,MAAM,EAAE,CAAC,6BAAD,EAAgC,2BAAhC,EAA6D,wBAA7D,EAAuF,wBAAvF,EAAiH,KAAjH,EAAwH,MAAxH,EAAgI,MAAhI,CADC;AAETC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,qBADT;AAEEC,IAAAA,eAAe,EAAE,QAFnB;AAGEC,IAAAA,WAAW,EAAE,oBAHf;AAIEC,IAAAA,WAAW,EAAE,CAJf;AAKEC,IAAAA,oBAAoB,EAAE,QALxB;AAMEC,IAAAA,gBAAgB,EAAE,QANpB;AAOER,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;AAPR,GADQ;AAFD,CAAb;;IAgBMS,U;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAC,IADF;AAENX,MAAAA,IAAI,EAAC;AAFC,K;;;;;;yCAIc;AAClB,WAAKY,KAAL,CAAWf,OAAX,CAAmB,KAAKe,KAAL,CAAWC,EAA9B;AACD;;;8CACyBC,S,EAAU;AAClC,UAAGA,SAAS,CAACC,KAAV,IAAmBD,SAAS,CAACC,KAAV,CAAgBC,IAAtC,EAA4C;AAC1CC,QAAAA,KAAK,CAAC,OAAD,CAAL;AACD;AACF;;;6BAEQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACR,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADQ,EAER,oBAAC,aAAD;AAAe,QAAA,IAAI,EAAEjB,IAArB;AAA4B,QAAA,MAAM,EAAE,GAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFQ,EAGR,oBAAC,OAAD,CAAS,KAAT;AAAe,QAAA,UAAU,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFF,EAGE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,CAHQ,EAQR,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CARQ,CADJ;AAaH;;;;EA5BoBP,S;;AA+BzB,IAAMyB,eAAe,GAAG,SAAlBA,eAAkB,CAAAR,KAAK;AAAA,SAAK;AAChCM,IAAAA,IAAI,EAAEN,KAAK,CAACK,KAAN,CAAYC;AADc,GAAL;AAAA,CAA7B;;AAKA,eAAepB,OAAO,CAACsB,eAAD,EAAkB;AAACrB,EAAAA,OAAO,EAAPA;AAAD,CAAlB,CAAP,CAAoCY,UAApC,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport {Segment, Header } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux';\r\nimport {getPoll} from '../../actions/pollActions';\r\n\r\nimport {HorizontalBar} from 'react-chartjs-2'\r\n\r\nimport Spinner from '../Spinner'\r\n\r\nconst data = {\r\n    labels: ['Shamanasada asd dsadsa dsad', 'Fdsadsa dasd asd asd asdd', 'March sadasd as d sadd', 'April asd as dsad sada', 'May', 'June', 'July'],\r\n    datasets: [\r\n      {\r\n        label: 'What Should I Roll?',\r\n        backgroundColor: 'orange',\r\n        borderColor: 'rgba(255,99,132,1)',\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: 'yellow',\r\n        hoverBorderColor: 'yellow',\r\n        data: [65, 59, 80, 81, 56, 55, 40]\r\n      }\r\n    ]\r\n  };\r\n  \r\n \r\nclass PollDetail extends Component {\r\n  state = {\r\n    loading:true,\r\n    data:[]\r\n  }\r\n    componentWillMount(){\r\n      this.props.getPoll(this.props.id);\r\n    }\r\n    componentWillReceiveProps(nextProps){\r\n      if(nextProps.polls && nextProps.polls.poll ){\r\n        alert('memes');\r\n      }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>         \r\n    <Header textAlign='center'>Your Question</Header>\r\n    <HorizontalBar data={data}  height={100}/>\r\n    <Segment.Group horizontal >\r\n      <Segment>Voters: 500</Segment>\r\n      <Segment>Published: 12341</Segment>\r\n      <Segment>Bottom</Segment>\r\n    </Segment.Group>\r\n    <Segment>Sharable Link: www.memes.com/123133</Segment>\r\n           \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  poll: state.polls.poll\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {getPoll})(PollDetail);\r\n"]},"metadata":{},"sourceType":"module"}
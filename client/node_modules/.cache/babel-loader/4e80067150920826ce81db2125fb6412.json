{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { GET_POLLS, GET_POLL, GET_POLL_TEST, GET_ERRORS, PUT_VOTE, POST_POLL, GET_CHECK } from './types'; //defining base URL\n\naxios.defaults.baseURL = 'http://localhost:5000/';\nexport var getPolls = function getPolls() {\n  return function (dispatch) {\n    axios.get('/api/polls/').then(function (res) {\n      return dispatch({\n        type: GET_POLLS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: 'No polls available.'\n      });\n    });\n  };\n};\nexport var getPoll = function getPoll(id) {\n  return function (dispatch) {\n    axios.get(\"api/polls/\".concat(id)).then(function (res) {\n      return dispatch({\n        type: GET_POLL,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: 'No poll with that id.'\n      });\n    });\n  };\n};\nexport var putVote =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(pollID, optionID) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", function (dispatch) {\n              axios.put(\"api/polls/vote/\".concat(pollID), optionID).then(function (res) {\n                return dispatch({\n                  type: PUT_VOTE,\n                  payload: res.data\n                });\n              }).catch(function (err) {\n                return dispatch({\n                  type: GET_ERRORS,\n                  payload: 'No option with that name.'\n                });\n              });\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function putVote(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var postPoll = function postPoll(poll) {\n  return function (dispatch) {\n    axios.post(\"api/polls/\", poll).then(function (res) {\n      return dispatch({\n        type: POST_POLL,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: 'Title required'\n      });\n    });\n  };\n};\nexport var getCheck =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(id) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", function (dispatch) {\n              axios.get(\"api/polls/check/\".concat(id)).then(function (res) {\n                return dispatch({\n                  type: GET_CHECK,\n                  payload: res.data\n                });\n              }).catch(function (err) {\n                return dispatch({\n                  type: GET_ERRORS,\n                  payload: 'No poll with that id.'\n                });\n              });\n            });\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getCheck(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getPollTest = function getPollTest(id, history) {\n  return function (dispatch) {\n    history.push(\"/\");\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Daniel\\Desktop\\keto\\client\\src\\actions\\pollActions.js"],"names":["axios","GET_POLLS","GET_POLL","GET_POLL_TEST","GET_ERRORS","PUT_VOTE","POST_POLL","GET_CHECK","defaults","baseURL","getPolls","dispatch","get","then","res","type","payload","data","catch","err","getPoll","id","putVote","pollID","optionID","put","postPoll","poll","post","getCheck","getPollTest","history","push"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {GET_POLLS, GET_POLL, GET_POLL_TEST, GET_ERRORS, PUT_VOTE, POST_POLL, GET_CHECK} from './types';\r\n\r\n\r\n\r\n//defining base URL\r\naxios.defaults.baseURL = 'http://localhost:5000/';\r\n\r\n\r\nexport const getPolls = ()=>dispatch=>{\r\n    axios\r\n    .get('/api/polls/')\r\n    .then(res => \r\n        dispatch({\r\n        type:GET_POLLS,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err=>\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: 'No polls available.',\r\n        })    \r\n    )\r\n\r\n}\r\nexport const getPoll = (id)=>dispatch=>{\r\n    axios\r\n    .get(`api/polls/${id}`)\r\n    .then(res => \r\n        dispatch({\r\n        type:GET_POLL,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err=>\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: 'No poll with that id.',\r\n        })    \r\n    )\r\n\r\n}\r\nexport const putVote = async(pollID, optionID) =>dispatch=>{\r\n    axios\r\n    .put(`api/polls/vote/${pollID}`, optionID)\r\n    .then(res => \r\n        dispatch({\r\n        type:PUT_VOTE,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err=>\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: 'No option with that name.',\r\n        })    \r\n    )\r\n\r\n}\r\n\r\nexport const postPoll = (poll) =>dispatch=>{\r\n    axios\r\n    .post(\"api/polls/\", poll)\r\n    .then(res => \r\n        dispatch({\r\n        type:POST_POLL,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err=>\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: 'Title required',\r\n        })    \r\n    )\r\n\r\n}\r\n\r\nexport const getCheck = async (id)=>dispatch=>{\r\n    axios\r\n    .get(`api/polls/check/${id}`)\r\n    .then(res => \r\n        dispatch({\r\n        type:GET_CHECK,\r\n        payload: res.data,\r\n        }))\r\n    .catch(err=>\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: 'No poll with that id.',\r\n        })    \r\n    )\r\n\r\n}\r\nexport const getPollTest = (id,history)=>dispatch=>{\r\n    history.push(\"/\");\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
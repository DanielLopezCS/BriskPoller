{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\src\\\\components\\\\PollVote\\\\PollVote.js\";\nimport React, { Component } from 'react';\nimport { Button, Checkbox, Form, Container, Segment, Header, Label, Table } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { getPoll, putVote, getCheck } from '../../actions/pollActions';\nimport { withRouter } from 'react-router-dom';\nimport { HorizontalBar } from 'react-chartjs-2';\n\nvar PollVote =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PollVote, _Component);\n\n  function PollVote() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PollVote);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PollVote)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.vote =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(optionID) {\n        var optionJSON;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                optionJSON = {\n                  option: optionID\n                };\n\n                _this.props.putVote(_this.props.id, optionJSON); //this.props.history.push(`/poll/${this.props.id}`);\n\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(PollVote, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.getPoll(this.props.id);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.props.getCheck(this.props.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, this.props.poll && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"  \", React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \" Should I meme? \"), React.createElement(Table, {\n        celled: true,\n        selectable: true,\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.props.poll.title))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, this.props.poll.options && this.props.poll.options.map(function (option) {\n        return React.createElement(Table.Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          id: option._id,\n          onClick: function onClick() {\n            _this2.vote(option._id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }, option.text));\n      })))));\n    }\n  }]);\n\n  return PollVote;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    poll: state.polls.poll\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getPoll: getPoll,\n  putVote: putVote,\n  getCheck: getCheck\n})(PollVote);","map":{"version":3,"sources":["C:\\Users\\Daniel\\Desktop\\keto\\client\\src\\components\\PollVote\\PollVote.js"],"names":["React","Component","Button","Checkbox","Form","Container","Segment","Header","Label","Table","connect","getPoll","putVote","getCheck","withRouter","HorizontalBar","PollVote","vote","optionID","optionJSON","option","props","id","nextProps","poll","title","options","map","_id","text","mapStateToProps","state","polls"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Checkbox, Form, Container, Segment, Header, Label, Table } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux';\r\nimport {getPoll, putVote, getCheck} from '../../actions/pollActions';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nimport {HorizontalBar} from 'react-chartjs-2';\r\n\r\n \r\n\r\nclass PollVote extends Component {\r\n\r\n  componentWillMount(){\r\n    this.props.getPoll(this.props.id)\r\n  }\r\n\r\n  vote = async (optionID) =>{\r\n    const optionJSON= {\r\n      option:optionID\r\n    }\r\n   \r\n    this.props.putVote(this.props.id, optionJSON);\r\n    //this.props.history.push(`/poll/${this.props.id}`);\r\n  }\r\n  componentWillReceiveProps(nextProps){\r\n    this.props.getCheck(this.props.id);\r\n\r\n  }\r\n\r\n    render() {\r\n        return (\r\n            <div >             \r\n              {this.props.poll &&  <div >  <Header> Should I meme? </Header>\r\n     <Table celled selectable size='large'>\r\n    <Table.Header>\r\n      <Table.Row>\r\n        <Table.HeaderCell textAlign='center'>{this.props.poll.title}</Table.HeaderCell>\r\n        \r\n      </Table.Row>\r\n    </Table.Header>\r\n    <Table.Body >\r\n\r\n                {this.props.poll.options&& this.props.poll.options.map(option=>\r\n                  <Table.Row >\r\n                  <Table.Cell id = {option._id} onClick={()=>{this.vote(option._id)}}>{option.text}</Table.Cell>\r\n                </Table.Row>\r\n                  )}\r\n     \r\n    </Table.Body>\r\n  </Table>\r\n   \r\n    </div >  \r\n}\r\n\r\n\r\n    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n  poll: state.polls.poll,\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, {getPoll, putVote, getCheck})(PollVote);\r\n\r\n  "]},"metadata":{},"sourceType":"module"}
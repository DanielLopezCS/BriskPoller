{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\poller\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\poller\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\poller\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\poller\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\poller\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\poller\\\\client\\\\src\\\\components\\\\Polls\\\\Polls.js\";\nimport React, { Component } from 'react';\nimport { Grid, Segment, Header, Container, Pagination } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { getPolls } from '../../actions/pollActions';\nimport { connect } from 'react-redux';\nimport Spinner from '../Spinner';\n\nvar Polls =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Polls, _Component);\n\n  function Polls() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Polls);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Polls)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(Polls, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.getPolls();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.polls) {\n        this.setState({\n          loading: false\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var polls = [{\n        text: 'Should I play Shaman?',\n        options: 5\n      }, {\n        text: 'Should I play Rogue?',\n        options: 2\n      }, {\n        text: 'Should I play Warrior?',\n        options: 10\n      }, {\n        text: 'Should I play Priest?',\n        options: 32\n      }];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, this.state.loading ? React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Last 15 Public Polls\"), this.props.polls.polls && this.props.polls.polls.splice(0, 15).map(function (poll) {\n        return React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(Link, {\n          to: '/poll/' + poll._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, React.createElement(Segment, {\n          raised: true,\n          color: \"orange\",\n          inverted: true,\n          size: \"huge\",\n          style: {\n            marginTop: '15px'\n          },\n          id: poll._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, poll.title))));\n      })));\n    }\n  }]);\n\n  return Polls;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    polls: state.polls\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getPolls: getPolls\n})(Polls);","map":{"version":3,"sources":["C:\\Users\\Daniel\\Desktop\\poller\\client\\src\\components\\Polls\\Polls.js"],"names":["React","Component","Grid","Segment","Header","Container","Pagination","Link","getPolls","connect","Spinner","Polls","state","loading","props","nextProps","polls","setState","text","options","splice","map","poll","_id","marginTop","title","mapStateToProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,MAAxB,EAAgCC,SAAhC,EAA2CC,UAA3C,QAA6D,mBAA7D;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,QAAR,QAAuB,2BAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,OAAP,MAAoB,YAApB;;IAEMC,K;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,OAAO,EAAC;AADJ,K;;;;;;yCAGY;AAChB,WAAKC,KAAL,CAAWN,QAAX;AACH;;;8CACyBO,S,EAAU;AAEhC,UAAGA,SAAS,CAACC,KAAb,EAAmB;AACf,aAAKC,QAAL,CAAc;AAACJ,UAAAA,OAAO,EAAC;AAAT,SAAd;AACH;AACJ;;;6BACQ;AACL,UAAMG,KAAK,GAAG,CACV;AAACE,QAAAA,IAAI,EAAC,uBAAN;AACAC,QAAAA,OAAO,EAAE;AADT,OADU,EAIV;AAACD,QAAAA,IAAI,EAAC,sBAAN;AACAC,QAAAA,OAAO,EAAE;AADT,OAJU,EAMV;AAACD,QAAAA,IAAI,EAAC,wBAAN;AACAC,QAAAA,OAAO,EAAE;AADT,OANU,EAQV;AAACD,QAAAA,IAAI,EAAC,uBAAN;AACAC,QAAAA,OAAO,EAAE;AADT,OARU,CAAd;AAaA,aACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKP,KAAL,CAAWC,OAAX,GAAoB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAApB,GAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACjC,oBAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADiC,EAE/B,KAAKC,KAAL,CAAWE,KAAX,CAAiBA,KAAjB,IAA0B,KAAKF,KAAL,CAAWE,KAAX,CAAiBA,KAAjB,CAAuBI,MAAvB,CAA8B,CAA9B,EAAgC,EAAhC,EAAoCC,GAApC,CAAwC,UAAAC,IAAI;AAAA,eACvE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACO;AAAG,UAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACH,oBAAC,IAAD;AAAM,UAAA,EAAE,EAAI,WAASA,IAAI,CAACC,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,OAAD;AAAS,UAAA,MAAM,MAAf;AAAiB,UAAA,KAAK,EAAC,QAAvB;AAAgC,UAAA,QAAQ,MAAxC;AAA0C,UAAA,IAAI,EAAC,MAA/C;AAAuD,UAAA,KAAK,EAAE;AAACC,YAAAA,SAAS,EAAC;AAAX,WAA9D;AAAkF,UAAA,EAAE,EAAIF,IAAI,CAACC,GAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEKD,IAAI,CAACG,KAFV,CADA,CADG,CADP,CADuE;AAAA,OAA5C,CAFK,CADrC,CADH;AA0BH;;;;EArDexB,S;;AAwDpB,IAAMyB,eAAe,GAAG,SAAlBA,eAAkB,CAAAd,KAAK;AAAA,SAAK;AAE9BI,IAAAA,KAAK,EAAEJ,KAAK,CAACI;AAFiB,GAAL;AAAA,CAA7B;;AAME,eAAeP,OAAO,CAACiB,eAAD,EAAkB;AAAClB,EAAAA,QAAQ,EAARA;AAAD,CAAlB,CAAP,CAAqCG,KAArC,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { Grid, Segment, Header, Container, Pagination } from 'semantic-ui-react'\r\nimport {Link} from 'react-router-dom'\r\nimport {getPolls} from '../../actions/pollActions';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Spinner from '../Spinner';\r\n\r\nclass Polls extends Component {\r\n    state = {\r\n        loading:true\r\n    }\r\n    componentWillMount(){\r\n        this.props.getPolls();\r\n    }\r\n    componentWillReceiveProps(nextProps){\r\n       \r\n        if(nextProps.polls){\r\n            this.setState({loading:false});\r\n        }\r\n    }\r\n    render() {\r\n        const polls = [\r\n            {text:'Should I play Shaman?',\r\n            options: 5\r\n            },\r\n            {text:'Should I play Rogue?',\r\n            options: 2},\r\n            {text:'Should I play Warrior?',\r\n            options: 10},\r\n            {text:'Should I play Priest?',\r\n            options: 32},\r\n\r\n        ]\r\n\r\n        return (\r\n           <div> \r\n               {this.state.loading? <Spinner/> :<div>\r\n               <Header as='h3'>Last 15 Public Polls</Header>\r\n                {this.props.polls.polls && this.props.polls.polls.splice(0,15).map(poll=>\r\n                <React.Fragment >\r\n                       <a href='#' >\r\n                    <Link to = {'/poll/'+poll._id}>\r\n                    <Segment raised  color='orange' inverted  size='huge'  style={{marginTop:'15px'}} id = {poll._id}>\r\n               \r\n                        {poll.title}\r\n                    </Segment>\r\n                    </Link>\r\n                     </a>\r\n                    </React.Fragment>\r\n                 \r\n                \r\n\r\n\r\n                 )}\r\n                 </div>\r\n                }\r\n            \r\n          \r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n    polls: state.polls,\r\n\r\n  });\r\n  \r\n  export default connect(mapStateToProps, {getPolls})(Polls);\r\n\r\n  "]},"metadata":{},"sourceType":"module"}
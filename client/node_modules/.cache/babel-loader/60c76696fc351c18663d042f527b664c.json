{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\src\\\\components\\\\PollDetail\\\\PollDetail.js\";\nimport React, { Component } from 'react';\nimport { Segment, Header, Container, Message, Icon, Label } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { getPoll } from '../../actions/pollActions';\nimport { HorizontalBar } from 'react-chartjs-2';\nimport Spinner from '../Spinner';\n\nvar PollDetail =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PollDetail, _Component);\n\n  function PollDetail() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PollDetail);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PollDetail)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: true,\n      data: []\n    };\n    return _this;\n  }\n\n  _createClass(PollDetail, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.getPoll(this.props.id);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var chartLabels = [];\n      var chartData = [];\n\n      for (var index in nextProps.poll.options) {\n        chartLabels.push(nextProps.poll.options[index].text);\n        chartData.push(nextProps.poll.options[index].voters.length);\n      }\n\n      var data = {\n        labels: chartLabels,\n        datasets: [{\n          label: 'Votes',\n          backgroundColor: 'orange',\n          borderColor: 'rgba(255,99,132,1)',\n          borderWidth: 1,\n          hoverBackgroundColor: 'yellow',\n          hoverBorderColor: 'yellow',\n          data: chartData\n        }],\n        options: {\n          responsive: true,\n          maintainAspectRatio: true\n        }\n      };\n      this.setState({\n        data: data\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, this.props.voted && React.createElement(Message, {\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Your Vote Has Been Recorded!\"), React.createElement(Header, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Your Question\"), React.createElement(HorizontalBar, {\n        data: this.state.data,\n        height: 80,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        color: \"orange\",\n        name: \"eye\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), \"300\"), React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        color: \"orange\",\n        name: \"calendar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), \"August 26 2019\"), React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        color: \"orange\",\n        name: \"linkify\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), \"www.memes.com/123133\")));\n    }\n  }]);\n\n  return PollDetail;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    poll: state.polls.poll\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getPoll: getPoll\n})(PollDetail);","map":{"version":3,"sources":["C:\\Users\\Daniel\\Desktop\\keto\\client\\src\\components\\PollDetail\\PollDetail.js"],"names":["React","Component","Segment","Header","Container","Message","Icon","Label","connect","getPoll","HorizontalBar","Spinner","PollDetail","state","loading","data","props","id","nextProps","chartLabels","chartData","index","poll","options","push","text","voters","length","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","responsive","maintainAspectRatio","setState","voted","mapStateToProps","polls"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {Segment, Header, Container, Message, Icon, Label } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux';\r\nimport {getPoll} from '../../actions/pollActions';\r\n\r\nimport {HorizontalBar} from 'react-chartjs-2'\r\n\r\nimport Spinner from '../Spinner'\r\n\r\n\r\n \r\nclass PollDetail extends Component {\r\n  state = {\r\n    loading:true,\r\n    data:[]\r\n  }\r\n    componentWillMount(){\r\n      this.props.getPoll(this.props.id);\r\n    }\r\n    componentWillReceiveProps(nextProps){\r\n     \r\n      const chartLabels = [];\r\n      const chartData = [];\r\n      for(const index in nextProps.poll.options){\r\n      \r\n        chartLabels.push(nextProps.poll.options[index].text);\r\n        chartData.push(nextProps.poll.options[index].voters.length);\r\n      }\r\n     \r\n      const data={\r\n        labels: chartLabels,\r\n        datasets: [\r\n          {\r\n            label: 'Votes',\r\n            backgroundColor: 'orange',\r\n            borderColor: 'rgba(255,99,132,1)',\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: 'yellow',\r\n            hoverBorderColor: 'yellow',\r\n            data: chartData\r\n          }\r\n        ],\r\n        options:{\r\n          responsive: true,\r\n          maintainAspectRatio: true,\r\n          \r\n        }\r\n      \r\n      };\r\n      this.setState({data:data})\r\n      \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >    \r\n            <Container>     \r\n              {this.props.voted && <Message color='teal'>Your Vote Has Been Recorded!</Message>}\r\n    <Header textAlign='center'>Your Question</Header>\r\n    <HorizontalBar data={this.state.data}  height={80} />\r\n  \r\n \r\n  <Label><Icon color='orange' name='eye'/>300</Label>\r\n  <Label><Icon color='orange' name='calendar'/>August 26 2019</Label>\r\n  <Label><Icon color='orange' name='linkify'/>www.memes.com/123133</Label>\r\n           </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  poll: state.polls.poll\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {getPoll})(PollDetail);\r\n"]},"metadata":{},"sourceType":"module"}
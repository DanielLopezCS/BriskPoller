{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Desktop\\\\keto\\\\client\\\\src\\\\components\\\\CreatePoll\\\\CreatePoll.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Button, Checkbox, Form, Container, Segment, Header, Label } from 'semantic-ui-react';\nimport { postPoll } from '../../actions/pollActions';\nimport { connect } from 'react-redux';\nimport './style.css';\n\nvar CreatePoll =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CreatePoll, _Component);\n\n  function CreatePoll() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CreatePoll);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CreatePoll)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      title: '',\n      options: [''],\n      size: 0\n    };\n\n    _this.handleText = function (i) {\n      return function (e) {\n        var options = _toConsumableArray(_this.state.options);\n\n        options[i] = e.target.value;\n\n        _this.setState({\n          options: options\n        });\n      };\n    };\n\n    _this.handleTitle = function (event) {\n      _this.setState({\n        title: event.target.value\n      });\n    };\n\n    _this.handleDelete = function (i) {\n      return function (e) {\n        e.preventDefault();\n        var options = [].concat(_toConsumableArray(_this.state.options.slice(0, i)), _toConsumableArray(_this.state.options.slice(i + 1)));\n\n        _this.setState({\n          options: options\n        });\n      };\n    };\n\n    _this.addOption = function (e) {\n      e.preventDefault();\n\n      if (e.target.id == _this.state.size) {\n        var options = _this.state.options.concat(['']);\n\n        _this.setState({\n          options: options,\n          size: _this.state.size + 1\n        });\n      }\n    };\n\n    _this.onSubmit = function (e) {\n      e.preventDefault();\n      var optionsJSON = [];\n      var title = _this.state.title;\n\n      for (var option in _this.state.options) {\n        optionsJSON.push({\n          \"text\": option.indexOf(0)\n        });\n      }\n\n      var pollJSON = {\n        title: title,\n        options: optionsJSON\n      };\n      alert(\"SUBMITTED!: \" + JSON.stringify(optionsJSON)); //this.props.postPoll(pollJSON);\n    };\n\n    return _this;\n  }\n\n  _createClass(CreatePoll, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Header, {\n        size: \"huge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Poller!\"), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        placeholder: \"Your Question\",\n        name: \"title\",\n        onChange: this.handleTitle,\n        value: this.state.title,\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, this.state.options.map(function (question, index) {\n        return React.createElement(\"div\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          placeholder: 'Poll Option #' + (index + 1),\n          onChange: _this2.handleText(index),\n          value: question,\n          onClick: _this2.addOption,\n          onFocus: _this2.addOption,\n          id: index,\n          style: {\n            marginTop: '20px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }));\n      })), React.createElement(Form.Field, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        label: \"Public\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(Button, {\n        type: \"submit\",\n        color: \"orange\",\n        size: \"huge\",\n        onClick: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Create\"))))));\n    }\n  }]);\n\n  return CreatePoll;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    poll: state.poll\n  };\n};\n\nexport default connect(mapStateToProps, {\n  postPoll: postPoll\n})(CreatePoll);","map":{"version":3,"sources":["C:\\Users\\Daniel\\Desktop\\keto\\client\\src\\components\\CreatePoll\\CreatePoll.js"],"names":["React","Component","Fragment","Button","Checkbox","Form","Container","Segment","Header","Label","postPoll","connect","CreatePoll","state","title","options","size","handleText","i","e","target","value","setState","handleTitle","event","handleDelete","preventDefault","slice","addOption","id","concat","onSubmit","optionsJSON","option","push","indexOf","pollJSON","alert","JSON","stringify","map","question","index","marginTop","mapStateToProps","poll"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport { Button, Checkbox, Form, Container, Segment, Header, Label } from 'semantic-ui-react'\r\nimport {postPoll} from '../../actions/pollActions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport './style.css'\r\n\r\nclass CreatePoll extends Component {\r\n    state = {\r\n      title:'',\r\n      options: [''],\r\n      size: 0\r\n    }\r\n \r\n    handleText = i => e => {\r\n      let options = [...this.state.options]\r\n      options[i] = e.target.value\r\n      this.setState({\r\n        options\r\n      })\r\n    }\r\n\r\n    handleTitle = (event) =>{\r\n      this.setState({title: event.target.value});\r\n    }\r\n  \r\n    handleDelete = i => e => {\r\n      e.preventDefault()\r\n      let options = [\r\n        ...this.state.options.slice(0, i),\r\n        ...this.state.options.slice(i + 1)\r\n      ]\r\n      this.setState({\r\n        options\r\n      })\r\n    }\r\n  \r\n    addOption = e => {\r\n      e.preventDefault()\r\n      if(e.target.id == this.state.size){\r\n      let options = this.state.options.concat([''])\r\n      this.setState({\r\n        options,\r\n        size: this.state.size +1\r\n      })\r\n        }\r\n    }\r\n  \r\n    onSubmit = (e) =>{\r\n        e.preventDefault();\r\n        const optionsJSON= [];\r\n        const title = this.state.title;\r\n        for(const option in this.state.options){\r\n          optionsJSON.push({\"text\":option.indexOf(0)});\r\n        }\r\n        \r\n        const pollJSON = {title:title, options: optionsJSON};\r\n\r\n        alert(\"SUBMITTED!: \" + JSON.stringify(optionsJSON));\r\n        //this.props.postPoll(pollJSON);\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <Fragment>\r\n        \r\n          <div>\r\n\r\n                <Header size='huge' >Poller!</Header>\r\n    <Container>\r\n        <Segment  >\r\n            <Form>\r\n                <Form.Field>\r\n             \r\n                <input placeholder='Your Question' name = 'title' onChange={this.handleTitle} value={this.state.title} type=\"text\"/>\r\n                \r\n                </Form.Field>\r\n                <Form.Field >\r\n                \r\n                {this.state.options.map((question, index) => (\r\n            <div key={index}>\r\n                \r\n              <input\r\n                type=\"text\"\r\n                placeholder={'Poll Option #' + (index+1)}\r\n                onChange={this.handleText(index)}\r\n                value={question}\r\n                onClick ={this.addOption}\r\n                onFocus ={this.addOption}\r\n                id={index}\r\n                style={{marginTop:'20px'}}\r\n              />\r\n           \r\n              <br/>\r\n            </div>\r\n            \r\n         \r\n          ))}\r\n\r\n                \r\n               \r\n                </Form.Field>\r\n                <Form.Field>\r\n                <Checkbox  label='Public' />\r\n                </Form.Field>\r\n                <Button type='submit' color='orange' size='huge' onClick={this.onSubmit}>Create</Button>\r\n            </Form>\r\n        </Segment>\r\n    </Container>\r\n            </div>\r\n\r\n        </Fragment>\r\n      )\r\n    }\r\n  }\r\n  \r\nconst mapStateToProps = state => ({\r\n\r\n  poll: state.poll,\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, {postPoll})(CreatePoll);\r\n\r\n"]},"metadata":{},"sourceType":"module"}
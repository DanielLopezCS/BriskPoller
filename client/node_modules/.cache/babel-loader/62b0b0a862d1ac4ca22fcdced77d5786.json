{"ast":null,"code":"module.exports = Paginator; // Paginator constructor\n//\n// `per_page` is the number of results per page, `length` is the number of\n// pages to display. They default to `25` and `10` respectively.\n\nfunction Paginator(per_page, length) {\n  // You really should be calling this with `new Paginator`, but WHATEVER.\n  if (!(this instanceof Paginator)) {\n    return new Paginator(per_page, length);\n  } // Woo, defaults!\n\n\n  this.per_page = per_page || 25;\n  this.length = length || 10;\n} // Build an object with all the necessary information for outputting pagination\n// controls.\n//\n// (new Paginator(paginator.build(100, 2)\n\n\nPaginator.prototype.build = function (total_results, current_page) {\n  // We want the number of pages, rounded up to the nearest page.\n  var total_pages = Math.ceil(total_results / this.per_page); // Ensure both total_results and current_page are treated as Numbers\n\n  total_results = parseInt(total_results, 10);\n  current_page = parseInt(current_page, 10) || 1; // Obviously we can't be on a negative or 0 page.\n\n  if (current_page < 1) {\n    current_page = 1;\n  } // If the user has done something like /page/99999 we want to clamp that back\n  // down.\n\n\n  if (current_page > total_pages) {\n    current_page = total_pages;\n  } // This is the first page to be displayed as a numbered link.\n\n\n  var first_page = Math.max(1, current_page - Math.floor(this.length / 2)); // And here's the last page to be displayed specifically.\n\n  var last_page = Math.min(total_pages, current_page + Math.floor(this.length / 2)); // This is triggered if we're at or near one of the extremes; we won't have\n  // enough page links. We need to adjust our bounds accordingly.\n\n  if (last_page - first_page + 1 < this.length) {\n    if (current_page < total_pages / 2) {\n      last_page = Math.min(total_pages, last_page + (this.length - (last_page - first_page)));\n    } else {\n      first_page = Math.max(1, first_page - (this.length - (last_page - first_page)));\n    }\n  } // This can be triggered if the user wants an odd number of pages.\n\n\n  if (last_page - first_page + 1 > this.length) {\n    // We want to move towards whatever extreme we're closest to at the time.\n    if (current_page > total_pages / 2) {\n      first_page++;\n    } else {\n      last_page--;\n    }\n  } // First result on the page. This, along with the field below, can be used to\n  // do \"showing x to y of z results\" style things.\n\n\n  var first_result = this.per_page * (current_page - 1);\n\n  if (first_result < 0) {\n    first_result = 0;\n  } // Last result on the page.\n\n\n  var last_result = this.per_page * current_page - 1;\n\n  if (last_result < 0) {\n    last_result = 0;\n  }\n\n  if (last_result > Math.max(total_results - 1, 0)) {\n    last_result = Math.max(total_results - 1, 0);\n  } // GIMME THAT OBJECT\n\n\n  return {\n    total_pages: total_pages,\n    pages: Math.min(last_page - first_page + 1, total_pages),\n    current_page: current_page,\n    first_page: first_page,\n    last_page: last_page,\n    previous_page: current_page - 1,\n    next_page: current_page + 1,\n    has_previous_page: current_page > 1,\n    has_next_page: current_page < total_pages,\n    total_results: total_results,\n    results: Math.min(last_result - first_result + 1, total_results),\n    first_result: first_result,\n    last_result: last_result\n  };\n};","map":null,"metadata":{},"sourceType":"script"}